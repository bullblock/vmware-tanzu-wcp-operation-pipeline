---
#
# task define
#
task-config: &task-config
  inputs:
    - name: workload-cluster-config
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: ((wcp-console-image))
      tag: ((wcp-console-image-tag))

#
# Resources
#
resources:

- name: concourse-tanzu-wcp-console
  type: registry-image
  icon: docker
  source:
    repository: powellcrack/concourse-tanzu-wcp-console
    tag: latest

- name: workload-cluster-config
  type: git
  icon: github
  source:
    uri:  ((workload-cluster-config-uri))
    branch: ((workload-cluster-config-uri-branch))
  check_every: 1m

#
# Jobs
#
jobs:

- name: ping-api-server
  serial: true
  plan:
  - get: concourse-tanzu-wcp-console
  - get: workload-cluster-config
    trigger: true
  - task: ping-api-server
    config:
      << : *task-config
      run:
        path: ping
        args: ["-c","5","((api_server))"]

- name: api-server-authentication
  serial: true
  plan:
  - get: concourse-tanzu-wcp-console
  - get: workload-cluster-config
    passed: [ping-api-server]
    trigger: true
  - task: api-server-authentication
    config:
      << : *task-config
      run:
        path: /bin/bash
        args:  
          - -c
          - |
            export KUBECTL_VSPHERE_PASSWORD=((kubectl_vsphere_password))
            kubectl vsphere login --vsphere-username=((kubectl_vsphere_username)) --server=https://((api_server)) --tanzu-kubernetes-cluster-namespace=((wcp-namespace)) --insecure-skip-tls-verify
        
- name: workload-clusters-operation
  serial: true
  plan: 
  - get: concourse-tanzu-wcp-console
  - get: workload-cluster-config
    passed: [api-server-authentication]
    trigger: true
  - task: workload-clusters-operation
    config:
      << : *task-config
      run:
        path: /bin/bash
        args:
          - -c
          - |
            export KUBECTL_VSPHERE_PASSWORD=((kubectl_vsphere_password))
            kubectl vsphere login --vsphere-username=((kubectl_vsphere_username)) --server=https://((api_server)) --tanzu-kubernetes-cluster-namespace=((wcp-namespace)) --insecure-skip-tls-verify
            kubectl config use-context ((wcp-namespace))
            kubectl get tkc -n ((wcp-namespace)) | awk '{print $1}' | awk '{if(NR>1)print}' |sort - > existing
            grep -i name: workload-cluster-config/((wcp-namespace)) | awk '{print $2}' | sort - > applying
            while read existing; do
            {
              item=`grep -i "$existing" applying`
              if [ ! -n "$item" ]; then
                echo $existing >> delete.list
              fi
            }
            done < existing
            if [ -s delete.list ]; then
              while read deleteing; do
              {
                kubectl delete tkc/"$deleteing" -n ((wcp-namespace))
                if [ -s workload-cluster-config/((wcp-namespace)) ]; then
                  kubectl apply -f workload-cluster-config/((wcp-namespace))
                fi
              }
              done < delete.list
            else
              if [ -s workload-cluster-config/((wcp-namespace)) ]; then
                kubectl apply -f workload-cluster-config/((wcp-namespace))
              fi
            fi

- name: workload-clusters-verify
  serial: true
  plan:
  - get: concourse-tanzu-wcp-console
  - get: workload-cluster-config
    passed: [workload-clusters-operation]
    trigger: true
  - task: workload-clusters-verify
    config:
      << : *task-config
      run:
        path: /bin/bash
        args:
          - -c
          - |
            export KUBECTL_VSPHERE_PASSWORD=((kubectl_vsphere_password))
            kubectl vsphere login --vsphere-username=((kubectl_vsphere_username)) --server=https://((api_server)) --tanzu-kubernetes-cluster-namespace=((wcp-namespace)) --insecure-skip-tls-verify
            kubectl config use-context ((wcp-namespace))
            kubectl get tkc -n ((wcp-namespace))
